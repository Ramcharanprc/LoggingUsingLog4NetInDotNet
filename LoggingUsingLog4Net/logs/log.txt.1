INFO  2021-01-30 02:07:49,933 2016695ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:49,969 2016731ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:49,970 2016732ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:50,257 2017019ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:50,288 2017050ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:50,288 2017050ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:50,289 2017051ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:50,289 2017051ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:50,671 2017433ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:50,704 2017466ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:50,705 2017467ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:50,706 2017468ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:50,709 2017471ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:51,067 2017829ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:51,099 2017861ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:51,100 2017862ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:51,100 2017862ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:51,101 2017863ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:51,440 2018202ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:51,464 2018226ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:51,465 2018227ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:51,465 2018227ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:51,465 2018227ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:51,854 2018616ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:51,885 2018647ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:51,885 2018647ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:51,886 2018648ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:51,886 2018648ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:52,205 2018967ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:52,237 2018999ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:52,237 2018999ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:52,238 2019000ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:52,238 2019000ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:52,574 2019336ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:52,606 2019368ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:52,607 2019369ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:52,608 2019370ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:52,609 2019371ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:52,971 2019733ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:53,003 2019765ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:53,004 2019766ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:53,004 2019766ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:53,005 2019767ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:53,364 2020126ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:53,395 2020157ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:53,396 2020158ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:53,396 2020158ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:53,396 2020158ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:53,755 2020517ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:53,799 2020561ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:53,799 2020561ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:53,800 2020562ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:53,801 2020563ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:55,045 2021807ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:55,077 2021840ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:55,078 2021841ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:55,078 2021841ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:55,078 2021841ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:08:14,496 2041258ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:08:14,532 2041294ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:08:14,532 2041294ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:08:14,533 2041295ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:08:14,533 2041295ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:09:25,475 2112237ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:09:25,507 2112269ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:09:25,507 2112269ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:09:25,507 2112270ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:09:25,507 2112270ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:09:45,567 2132329ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:09:45,618 2132380ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:09:45,619 2132381ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:09:45,619 2132381ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:09:45,620 2132382ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:11:57,592 2264355ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:11:57,624 2264386ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:11:57,624 2264386ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:11:57,624 2264386ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:11:57,625 2264387ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:12:21,971 2288734ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:12:22,012 2288775ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:12:22,013 2288776ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:12:22,013 2288776ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:12:22,013 2288776ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:12:31,972 2298735ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:12:32,019 2298782ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:12:32,020 2298783ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:12:32,020 2298783ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:12:32,020 2298783ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:12:38,615 2305377ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:12:38,656 2305418ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:12:38,657 2305419ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:12:38,658 2305420ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:12:38,659 2305421ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:12:49,752 2316514ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:12:49,798 2316560ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:12:49,799 2316561ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:12:49,799 2316561ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:12:49,800 2316562ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:13:16,340 2343102ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:13:16,371 2343133ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:13:16,372 2343134ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:13:16,372 2343134ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:13:16,373 2343135ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:13:22,213 2348975ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:13:22,253 2349015ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:13:22,254 2349016ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:13:22,254 2349016ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:13:22,255 2349017ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:14:34,085 2420848ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:14:34,123 2420886ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:14:34,124 2420887ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:14:34,124 2420887ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:14:34,125 2420888ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:14:37,369 2424131ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:14:37,406 2424168ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:14:37,407 2424169ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:14:37,408 2424170ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:14:37,409 2424171ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:14:44,223 2430985ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:14:44,256 2431018ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:14:44,257 2431019ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:14:44,257 2431019ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:14:44,258 2431020ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:14:56,955 2443717ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:14:57,006 2443768ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:14:57,007 2443769ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:14:57,007 2443769ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:14:57,009 2443771ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:15:04,773 2451535ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:15:04,819 2451581ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:15:04,820 2451582ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:15:04,820 2451582ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:15:04,821 2451583ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:15:07,506 2454268ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:15:07,534 2454296ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:15:07,535 2454297ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:15:07,536 2454298ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:15:07,537 2454299ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:15:09,277 2456039ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:15:09,313 2456075ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:15:09,314 2456076ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:15:09,314 2456076ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:15:09,315 2456077ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:15:10,066 2456828ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:15:10,100 2456862ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:15:10,100 2456862ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:15:10,101 2456863ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:15:10,103 2456865ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:15:11,192 2457954ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:15:11,229 2457991ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:15:11,230 2457992ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:15:11,231 2457993ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:15:11,232 2457994ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:15:12,003 2458765ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:15:12,030 2458792ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:15:12,030 2458792ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
