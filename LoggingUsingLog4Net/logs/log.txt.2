DEBUG 2021-01-29 15:34:34,794   471ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-29 15:34:34,896   572ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-29 15:34:34,909   586ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-29 15:34:34,910   587ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-29 15:34:34,911   588ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 01:31:22,751   499ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 01:31:22,894   643ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 01:31:22,905   654ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 01:31:22,907   656ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 01:31:22,908   657ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 01:33:38,175 135923ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 01:33:38,219 135968ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 01:33:38,220 135969ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 01:33:38,221 135970ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 01:33:38,222 135971ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 01:33:58,168 155917ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 01:33:58,198 155947ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 01:33:58,199 155948ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 01:33:58,200 155949ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 01:33:58,201 155950ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 01:34:14,002   765ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 01:34:14,096   859ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 01:34:14,096   859ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 01:34:14,097   860ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 01:34:14,098   861ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:03:26,791 1753553ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:03:26,824 1753586ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:03:26,825 1753587ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:03:26,825 1753587ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:03:26,825 1753587ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:03:51,563 1778325ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:03:51,607 1778370ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:03:51,608 1778371ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:03:51,608 1778371ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:03:51,609 1778372ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:03:54,604 1781366ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:03:54,634 1781396ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:03:54,634 1781396ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:03:54,635 1781397ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:03:54,635 1781397ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:03:56,372 1783135ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:03:56,401 1783163ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:03:56,401 1783163ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:03:56,402 1783164ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:03:56,402 1783164ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:03:57,491 1784253ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:03:57,524 1784286ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:03:57,525 1784287ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:03:57,525 1784287ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:03:57,526 1784288ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:03:58,017 1784779ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:03:58,045 1784807ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:03:58,045 1784807ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:03:58,046 1784808ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:03:58,047 1784809ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:03:58,505 1785267ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:03:58,537 1785299ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:03:58,539 1785301ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:03:58,540 1785302ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:03:58,540 1785302ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:03:58,952 1785714ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:03:58,984 1785746ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:03:58,985 1785747ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:03:58,985 1785747ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:03:58,986 1785748ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:04:21,773 1808535ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:04:21,800 1808562ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:04:21,801 1808563ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:04:21,801 1808563ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:04:21,801 1808563ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:05:37,973 1884735ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:05:38,000 1884762ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:05:38,000 1884762ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:05:38,000 1884762ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:05:38,001 1884763ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:02,365 1969127ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:02,426 1969188ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:02,427 1969189ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:02,427 1969189ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:02,428 1969190ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:38,797 2005560ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:38,837 2005599ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:38,838 2005600ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:38,838 2005600ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:38,839 2005601ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:42,159 2008921ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:42,184 2008947ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:42,186 2008949ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:42,186 2008949ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:42,187 2008950ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:43,682 2010444ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:43,713 2010475ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:43,713 2010475ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:43,714 2010476ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:43,714 2010476ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:44,644 2011406ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:44,672 2011434ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:44,674 2011436ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:44,674 2011436ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:44,675 2011437ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:45,376 2012138ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:45,403 2012165ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:45,404 2012166ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:45,404 2012166ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:45,404 2012166ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:45,921 2012683ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:45,950 2012712ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:45,950 2012712ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:45,950 2012712ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:45,951 2012713ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:46,343 2013105ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:46,373 2013135ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:46,373 2013135ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:46,374 2013136ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:46,374 2013136ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:46,743 2013505ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:46,772 2013534ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:46,773 2013535ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:46,773 2013535ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:46,774 2013536ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:47,155 2013917ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:47,190 2013952ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:47,191 2013953ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:47,191 2013953ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:47,191 2013953ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:47,516 2014278ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:47,545 2014307ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:47,546 2014308ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:47,547 2014309ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:47,547 2014309ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:48,006 2014768ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:48,048 2014810ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:48,050 2014812ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:48,051 2014813ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:48,052 2014814ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:48,342 2015104ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:48,373 2015135ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:48,374 2015136ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:48,374 2015136ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:48,375 2015137ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:48,743 2015505ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:48,775 2015537ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:48,776 2015538ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:48,776 2015538ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:48,776 2015538ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:49,134 2015897ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:49,163 2015926ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:49,163 2015926ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:49,163 2015926ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:49,164 2015927ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:49,486 2016249ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:49,524 2016287ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
INFO  2021-01-30 02:07:49,525 2016287ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
WARN  2021-01-30 02:07:49,525 2016287ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
FATAL 2021-01-30 02:07:49,526 2016288ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
DEBUG 2021-01-30 02:07:49,874 2016636ms HomeController         Index              - Int32[] {0, 1, 2, 3}
ERROR 2021-01-30 02:07:49,932 2016694ms HomeController         Index              - System.Exception: Custom log levels can also be defined in configuration. This is convenient for using a custom level in a logger filter or an appender filter. Similar to defining log levels in code, a custom level must be defined first, before it can be used. If a logger or appender is configured with an undefined level, that logger or appender will be invalid and will not process any log events.The CustomLevel configuration element creates a custom level.Internally it calls the same Level.forName() method discussed above.
   at LoggingUsingLog4Net.Controllers.HomeController.Index() in E:\Work\Practice\LoggingUsingLog4.Net\LoggingUsingLog4Net\LoggingUsingLog4Net\Controllers\HomeController.cs:line 21
